/*!
 * jQuery demo: https://formbuilder.online/
 * Version: 3.7.3
 * Author: Kevin Chappell <kevin.b.chappell@gmail.com>
 */
(function ($) { "use strict";
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "../src/demo/js/demo.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/css-loader/dist/cjs.js?!../node_modules/postcss-loader/src/index.js?!../node_modules/sass-loader/dist/cjs.js?!../src/demo/sass/demo.scss":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js??ref--7-1!../node_modules/postcss-loader/src??ref--7-2!../node_modules/sass-loader/dist/cjs.js??ref--7-3!../src/demo/sass/demo.scss ***!
  \**********************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

throw new Error("Module build failed (from ../node_modules/css-loader/dist/cjs.js):\nValidationError: Invalid options object. CSS Loader has been initialized using an options object that does not match the API schema.\n - options has an unknown property 'exportType'. These properties are valid:\n   object { url?, import?, modules?, icss?, sourceMap?, importLoaders?, esModule? }\n    at validate (/Users/jugs/Sites/plugindev/formBuilder-3.7.3/node_modules/schema-utils/dist/validate.js:98:11)\n    at Object.loader (/Users/jugs/Sites/plugindev/formBuilder-3.7.3/node_modules/css-loader/dist/index.js:36:28)");

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : undefined;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "../src/demo/js/actionButtons.js":
/*!***************************************!*\
  !*** ../src/demo/js/actionButtons.js ***!
  \***************************************/
/*! exports provided: setCurrentFieldIdValues, builderActions, renderActions, demoActions, generateActionTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setCurrentFieldIdValues", function() { return setCurrentFieldIdValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "builderActions", function() { return builderActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderActions", function() { return renderActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "demoActions", function() { return demoActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateActionTable", function() { return generateActionTable; });
/* harmony import */ var _js_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../js/utils */ "../src/js/utils.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


const setCurrentFieldIdValues = value => {
  const currentFieldIds = document.querySelectorAll('.current-field-id');
  currentFieldIds.forEach(field => {
    field.value = value;
  });
};
const builderActions = {
  showData: () => $('.build-wrap').formBuilder('showData'),
  clearFields: () => $('.build-wrap').formBuilder('clearFields'),
  getData: () => {
    console.log($('.build-wrap').formBuilder('getData'));
  },
  setData: () => {
    const fb = $('.build-wrap').formBuilder;
    const dataInput = fb('markup', 'textarea', fb('getData', 'json', true), {
      id: 'setData-value',
      rows: 30,
      style: 'width: 100%'
    });

    const click = () => $('.build-wrap').formBuilder('setData', dataInput.value);

    const setDataButton = fb('markup', 'button', 'Set Data', {
      events: {
        click
      }
    });
    const dialogContents = fb('markup', 'div', [dataInput, setDataButton]);
    fb('showDialog', dialogContents, null, 'data-dialog');
  },
  save: () => {
    $('.build-wrap').formBuilder('save');
  },
  addField: () => {
    const field = {
      type: 'text',
      class: 'form-control',
      label: 'Text Field added at: ' + new Date().getTime()
    };
    $('.build-wrap').formBuilder('addField', field);
  },
  removeField: () => {
    const currentFieldId = $('.build-wrap').formBuilder('getCurrentFieldId');
    setCurrentFieldIdValues('');
    $('.build-wrap').formBuilder('removeField', currentFieldId);
  },
  getXML: () => {
    alert($('.build-wrap').formBuilder('getData', 'xml'));
  },
  getJSON: () => {
    alert($('.build-wrap').formBuilder('getData', 'json', true));
  },
  getJS: () => {
    alert('check console');
    console.log($('.build-wrap').formBuilder('getData'));
  },
  toggleEdit: () => {
    const currentFieldId = $('.build-wrap').formBuilder('getCurrentFieldId');
    $('.build-wrap').formBuilder('toggleFieldEdit', currentFieldId);
  },
  toggleAllEdit: () => $('.build-wrap').formBuilder('toggleAllFieldEdit'),
  getFieldTypes: () => console.log($('.build-wrap').formBuilder('getFieldTypes'))
};
const renderActions = {
  loadUserForm: () => {
    const formRenderOptions = {
      controlConfig: {
        'textarea.tinymce': {
          branding: false,
          encoding: 'xml',
          menubar: 'edit insert format table',
          plugins: 'preview searchreplace autolink link table lists textcolor colorpicker',
          toolbar: ['formatselect', 'bold italic forecolor backcolor', 'link', 'alignleft aligncenter alignright alignjustify', 'numlist bullist outdent indent', 'preview'].join(' | ')
        }
      },
      formData: '[{"type":"autocomplete","label":"Autocomplete","className":"form-control","name":"autocomplete-1526094918549","requireValidOption":true,"values":[{"label":"Option 1","value":"option-1"},{"label":"Option 2","value":"option-2"},{"label":"Option 3","value":"option-3"}],"userData":["option-1"]},{"type":"checkbox-group","label":"Checkbox Group","name":"checkbox-group-1526095813035","other":true,"values":[{"label":"Option 1","value":"option-1"},{"label":"Option 2","value":"option-2"}],"userData":["option-1","Bilbo \\"baggins\\""]},{"type":"text","label":"Color Field","name":"text-1526099104236","subtype":"color","userData":["#00ff00"]},{"type":"text","label":"Text Field","name":"text-1526099104236","subtype":"tel","userData":["123-456-7890"]},{"type":"date","label":"Date Field","className":"form-control","name":"date-1526096579821","userData":["2018-01-01"]},{"type":"number","label":"Number","className":"form-control","name":"number-1526099204594","min":"1","max":"3","step":".2","userData":["1.1"]},{"type":"textarea","label":"Text Area","className":"form-control","name":"textarea-1526099273610","subtype":"textarea","userData":["Tennessee Welcomes You!"]},{"type":"textarea","subtype":"tinymce","label":"TinyMCE","className":"form-control","name":"textarea-1526099273610","userData":["&lt;p&gt;&lt;span style=&quot;color: #339966;&quot;&gt;It&#39;s a great place&lt;/span&gt;&lt;/p&gt;"]}]'
    };
    $('.render-wrap').formRender(formRenderOptions);
  },
  clearUserForm: () => {
    $('.render-wrap').formRender('clear');
  },
  renderUserForm: () => {
    const formData = '[{"type":"text","label":"Color picker","name":"text-1526099104236","subtype":"color","userData":["#00ff00"]},{"type":"text","label":"Text Field","name":"text-1526099104236","subtype":"tel","userData":["123-456-7890"]},{"type":"date","label":"Date Field","className":"form-control","name":"date-1526096579821","userData":["2018-01-01"]},{"type":"number","label":"Number","className":"form-control","name":"number-1526099204594","min":"1","max":"3","step":".2","userData":["1.1"]},{"type":"textarea","label":"Text Area","className":"form-control","name":"textarea-1526099273610","subtype":"textarea","userData":["Tennessee Welcomes You!"]},{"type":"textarea","subtype":"tinymce","label":"TinyMCE","className":"form-control","name":"textarea-1526099273610","userData":["&lt;p&gt;&lt;span style=&quot;color: #339966;&quot;&gt;It&#39;s a great place&lt;/span&gt;&lt;/p&gt;"]}]';
    $('.render-wrap').formRender('render', formData);
  },
  getHTML: () => {
    console.log($('.render-wrap').formRender('html'));
  },
  showUserData: () => {
    alert(JSON.stringify($('.render-wrap').formRender('userData')));
  }
};
const demoActions = {
  testSubmit: () => {
    const form = document.querySelector('.render-wrap');
    const formData = new FormData(form);
    console.log('Can submit: ', form.checkValidity());
    console.log('FormData:');

    for (var pair of formData.entries()) {
      console.log(`${pair[0]}: ${pair[1]}`);
    }
  },
  resetDemo: () => {
    window.sessionStorage.removeItem('formData');
    location.reload();
  }
};

const processCell = cellData => {
  let cell = cellData;

  if (typeof cell === 'string') {
    cell = {
      attrs: {
        scope: 'col'
      },
      content: Object(_js_utils__WEBPACK_IMPORTED_MODULE_0__["titleCase"])(cellData)
    };
  }

  if (typeof cell.content === 'string') {
    cell.content = document.createTextNode(cell.content);
  }

  return _objectSpread({
    attrs: {}
  }, cell);
};

const generateTr = function (columns, isHeader) {
  if (isHeader === void 0) {
    isHeader = false;
  }

  return columns.reduce((acc, cur) => {
    const column = processCell(cur);
    const type = isHeader ? 'th' : 'td';
    const td = document.createElement(type);
    td.appendChild(column.content);
    Object.entries(column.attrs).forEach(_ref => {
      let [key, val] = _ref;
      td.setAttribute(key, val);
    });
    acc.appendChild(td);
    return acc;
  }, document.createElement('tr'));
};

const apiBtns = _objectSpread(_objectSpread(_objectSpread({}, builderActions), renderActions), demoActions);

const generateActionTable = (actions, columns) => {
  const fragment = document.createDocumentFragment();
  const thead = document.createElement('thead');
  thead.appendChild(generateTr(columns, true));
  const actionApiRows = Object.entries(actions).reduce((acc, _ref2) => {
    let [key, content] = _ref2;
    const description = {
      content
    };
    const code = document.createElement('code');
    code.appendChild(document.createTextNode(key));
    const action = {
      content: code
    };
    let actionDemoTrigger = document.getElementById(key);

    if (!actionDemoTrigger) {
      actionDemoTrigger = document.createElement('button');
      actionDemoTrigger.id = key;
      actionDemoTrigger.textContent = Object(_js_utils__WEBPACK_IMPORTED_MODULE_0__["titleCase"])(key);
      actionDemoTrigger.addEventListener('click', e => apiBtns[key] && apiBtns[key](e));
    } else {
      const trigger = actionDemoTrigger.querySelector('.trigger');

      if (trigger) {
        trigger.addEventListener('click', e => apiBtns[key] && apiBtns[key](e));
      }
    }

    const demo = {
      content: actionDemoTrigger
    };
    acc.appendChild(generateTr([action, description, demo]));
    return acc;
  }, document.createDocumentFragment());
  const tbody = document.createElement('tbody');
  tbody.appendChild(actionApiRows);
  fragment.appendChild(thead);
  fragment.appendChild(tbody);
  return fragment;
};

/***/ }),

/***/ "../src/demo/js/demo.js":
/*!******************************!*\
  !*** ../src/demo/js/demo.js ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sass_demo_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sass/demo.scss */ "../src/demo/sass/demo.scss");
/* harmony import */ var _sass_demo_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_sass_demo_scss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _js_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../js/utils */ "../src/js/utils.js");
/* harmony import */ var _actionButtons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./actionButtons */ "../src/demo/js/actionButtons.js");



const localeSessionKey = 'formBuilder-locale';
const defaultLocale = 'en-US';
const dataType = 'json';

const toggleBootStrap = _ref => {
  let {
    target
  } = _ref;

  if (!target.checked) {
    Object(_js_utils__WEBPACK_IMPORTED_MODULE_1__["removeStyle"])('bootstrap');
  } else {
    Object(_js_utils__WEBPACK_IMPORTED_MODULE_1__["insertStyle"])({
      src: 'https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css',
      id: 'bootstrap'
    });
  }
};

jQuery(function ($) {
  const fields = [{
    type: 'autocomplete',
    label: 'Custom Autocomplete',
    required: true,
    values: [{
      label: 'SQL'
    }, {
      label: 'C#'
    }, {
      label: 'JavaScript'
    }, {
      label: 'Java'
    }, {
      label: 'Python'
    }, {
      label: 'C++'
    }, {
      label: 'PHP'
    }, {
      label: 'Swift'
    }, {
      label: 'Ruby'
    }]
  }, {
    label: 'Date And Time',
    type: 'text',
    subtype: 'datetime-local',
    icon: '⏰'
  }, {
    label: 'Star Rating',
    attrs: {
      type: 'starRating'
    },
    icon: '🌟'
  }, {
    type: 'checkbox-group',
    subtype: 'custom-group',
    label: 'Custom Checkbox Group w/Sub Type',
    required: true,
    values: [{
      label: 'Option 1'
    }, {
      label: 'Option 2'
    }]
  }];
  const replaceFields = [];
  const actionButtons = [{
    id: 'smile',
    className: 'btn btn-success',
    label: '😁',
    type: 'button',
    events: {
      click: () => {
        alert('😁😁😁 !SMILE! 😁😁😁');
      }
    }
  }, 'save'];
  const templates = {
    starRating: function (fieldData) {
      return {
        field: '<span id="' + fieldData.name + '">',
        onRender: () => {
          $(document.getElementById(fieldData.name)).rateYo({
            rating: 3.6
          });
        }
      };
    }
  };
  const inputSets = [{
    label: 'Name',
    icon: '👨',
    name: 'name',
    showHeader: false,
    fields: [[{
      type: 'text',
      label: 'First Name',
      className: 'form-control'
    }, {
      type: 'text',
      label: 'Last Name',
      className: 'form-control'
    }]]
  }, {
    label: 'User Agreement',
    fields: [[{
      type: 'header',
      subtype: 'h3',
      label: 'Terms & Conditions',
      className: 'header'
    }, {
      type: 'paragraph',
      label: 'Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.'
    }], [{
      type: 'paragraph',
      label: 'Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.'
    }], [{
      type: 'checkbox',
      label: 'Do you agree to the terms and conditions?'
    }]]
  }];
  const typeUserDisabledAttrs = {
    autocomplete: ['access']
  };
  const typeUserAttrs = {
    text: {
      shape: {
        label: 'Class',
        multiple: true,
        options: {
          'red form-control': 'Red',
          'green form-control': 'Green',
          'blue form-control': 'Blue'
        },
        style: 'border: 1px solid red'
      },
      readonly: {
        label: 'readonly',
        value: false
      }
    },
    'checkbox-group': {
      'custom-group': {
        customInput: {
          label: 'Custom Text Field',
          value: 'This field is added only to checkbox with specific subtype',
          type: 'text'
        }
      }
    }
  };
  const disabledAttrs = ['placeholder', 'name'];
  const fbOptions = {
    defaultFields: [{
      className: 'form-control',
      label: 'Default Field',
      placeholder: 'Enter your default field value',
      name: 'default-field-1',
      type: 'text'
    }],
    persistDefaultFields: true,
    disabledSubtypes: {
      text: ['password']
    },
    disableHTMLLabels: false,
    disabledAttrs,
    allowStageSort: false,
    dataType,
    subtypes: {
      text: ['datetime-local'],
      'checkbox-group': ['custom-group']
    },
    onSave: toggleEdit,
    onAddField: fieldId => {
      Object(_actionButtons__WEBPACK_IMPORTED_MODULE_2__["setCurrentFieldIdValues"])(fieldId);
    },
    onAddOption: (optionTemplate, _ref2) => {
      let {
        index
      } = _ref2;
      optionTemplate.label = optionTemplate.label || `Option ${index + 1}`;
      optionTemplate.value = optionTemplate.value || `option-${index + 1}`;
      return optionTemplate;
    },
    onClearAll: () => window.sessionStorage.removeItem('formData'),
    stickyControls: {
      enable: true
    },
    roles: {
      1: 'Administrator',
      2: 'User'
    },
    sortableControls: false,
    propertiesInModal: true,
    maxFieldsInRow: 4,
    fields: fields,
    templates: templates,
    inputSets: inputSets,
    typeUserDisabledAttrs: typeUserDisabledAttrs,
    typeUserAttrs: typeUserAttrs,
    disableInjectedStyle: false,
    actionButtons: actionButtons,
    disableFields: ['autocomplete', 'custom-tinymce'],
    replaceFields: replaceFields,
    fieldRemoveWarn: true,
    disabledFieldButtons: {},
    controlPosition: 'left',
    i18n: {
      override: {
        [defaultLocale]: {
          number: 'Number',
          text: 'Single Line Text',
          textArea: 'Multi Line Text'
        }
      }
    },
    scrollToFieldOnAdd: false
  };
  var formData = '[[{"type":"text","required":false,"label":"Text Field","className":"form-control","name":"text-1636453044631-0","access":false,"subtype":"text","readonly":false},{"type":"text","required":false,"label":"Full Name","className":"form-control","name":"text-1476748004559","access":false,"value":"2","subtype":"text","maxlength":2}],[{"type":"select","required":false,"label":"Select","className":"form-control","name":"select-1636461342702-0","access":false,"multiple":false,"values":[{"label":"Option 1","value":"option-1","selected":true},{"label":"Option 2","value":"option-2","selected":false},{"label":"Option 3","value":"option-3","selected":false}]},{"type":"select","required":false,"label":"Select","className":"form-control","name":"select-1636461306907-0","access":false,"multiple":false,"values":[{"label":"Option 1","value":"option-1","selected":true},{"label":"Option 2","value":"option-2","selected":false},{"label":"Option 3","value":"option-3","selected":false}]},{"type":"select","required":false,"label":"Select","className":"form-control","name":"select-1636453046284-0","access":false,"multiple":false,"values":[{"label":"Option 1","value":"option-1","selected":true},{"label":"Option 2","value":"option-2","selected":false},{"label":"Option 3","value":"option-3","selected":false}]}],[{"type":"text","required":false,"label":"Text Field","className":"form-control","name":"text-1636453050671-0","access":false,"value":"4","subtype":"text","maxlength":4}],[{"type":"select","required":false,"label":"Select","className":"form-control","name":"select-1636461342859-0","access":false,"multiple":false,"values":[{"label":"Option 1","value":"option-1","selected":true},{"label":"Option 2","value":"option-2","selected":false},{"label":"Option 3","value":"option-3","selected":false}]}]]';
  let editing = true;

  if (formData) {
    fbOptions.formData = formData;
  }

  function toggleEdit() {
    document.body.classList.toggle('form-rendered', editing);

    if (!editing) {
      $('.build-wrap').formBuilder('setData', $('.render-wrap').formRender('userData'));
    } else {
      const formRenderData = $('.build-wrap').formBuilder('getData', dataType);
      $('.render-wrap').formRender({
        formData: formRenderData,
        templates: templates,
        dataType
      });
      window.sessionStorage.setItem('formData', formRenderData);
    }

    return editing = !editing;
  }

  const formBuilder = $('.build-wrap').formBuilder(fbOptions);
  const fbPromise = formBuilder.promise;
  fbPromise.then(function (fb) {});
});

/***/ }),

/***/ "../src/demo/sass/demo.scss":
/*!**********************************!*\
  !*** ../src/demo/sass/demo.scss ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js??ref--7-1!../../../node_modules/postcss-loader/src??ref--7-2!../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!./demo.scss */ "../node_modules/css-loader/dist/cjs.js?!../node_modules/postcss-loader/src/index.js?!../node_modules/sass-loader/dist/cjs.js?!../src/demo/sass/demo.scss");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {"attributes":{"class":"formBuilder-injected-style"}};

options.insert = "head";
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ }),

/***/ "../src/js/utils.js":
/*!**************************!*\
  !*** ../src/js/utils.js ***!
  \**************************/
/*! exports provided: trimObj, validAttr, xmlAttrString, attrString, safeAttr, flattenArray, safeAttrName, hyphenCase, camelCase, bindEvents, nameAttr, getContentType, markup, parseAttrs, parseOptions, parseUserData, parseXML, parsedHtml, escapeHtml, escapeAttr, escapeAttrs, forEach, unique, removeFromArray, getScripts, isCached, getStyles, capitalize, merge, addEventListeners, closest, mobileClass, safename, forceNumber, subtract, insertStyle, removeStyle, titleCase, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trimObj", function() { return trimObj; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validAttr", function() { return validAttr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "xmlAttrString", function() { return xmlAttrString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "attrString", function() { return attrString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "safeAttr", function() { return safeAttr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flattenArray", function() { return flattenArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "safeAttrName", function() { return safeAttrName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hyphenCase", function() { return hyphenCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "camelCase", function() { return camelCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindEvents", function() { return bindEvents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nameAttr", function() { return nameAttr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getContentType", function() { return getContentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "markup", function() { return markup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseAttrs", function() { return parseAttrs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseOptions", function() { return parseOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseUserData", function() { return parseUserData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseXML", function() { return parseXML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parsedHtml", function() { return parsedHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "escapeHtml", function() { return escapeHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "escapeAttr", function() { return escapeAttr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "escapeAttrs", function() { return escapeAttrs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return forEach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unique", function() { return unique; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeFromArray", function() { return removeFromArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getScripts", function() { return getScripts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCached", function() { return isCached; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStyles", function() { return getStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capitalize", function() { return capitalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return merge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addEventListeners", function() { return addEventListeners; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closest", function() { return closest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mobileClass", function() { return mobileClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "safename", function() { return safename; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forceNumber", function() { return forceNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertStyle", function() { return insertStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeStyle", function() { return removeStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "titleCase", function() { return titleCase; });
const _excluded = ["events"],
      _excluded2 = ["tag", "content"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

window.fbLoaded = {
  js: [],
  css: []
};
window.fbEditors = {
  quill: {},
  tinymce: {}
};
const trimObj = function (attrs, removeFalse) {
  if (removeFalse === void 0) {
    removeFalse = false;
  }

  const xmlRemove = [null, undefined, ''];

  if (removeFalse) {
    xmlRemove.push(false);
  }

  for (const attr in attrs) {
    if (xmlRemove.includes(attrs[attr])) {
      delete attrs[attr];
    } else if (Array.isArray(attrs[attr])) {
      if (!attrs[attr].length) {
        delete attrs[attr];
      }
    }
  }

  return attrs;
};
const validAttr = function (attr) {
  const invalid = ['values', 'enableOther', 'other', 'label', 'subtype'];
  return !invalid.includes(attr);
};
const xmlAttrString = attrs => Object.entries(attrs).map(_ref => {
  let [key, val] = _ref;
  return `${hyphenCase(key)}="${val}"`;
}).join(' ');
const attrString = attrs => Object.entries(attrs).map(_ref2 => {
  let [key, val] = _ref2;
  return validAttr(key) && Object.values(safeAttr(key, val)).join('');
}).filter(Boolean).join(' ');
const safeAttr = (name, value) => {
  name = safeAttrName(name);
  let valString;

  if (value) {
    if (Array.isArray(value)) {
      valString = escapeAttr(value.join(' '));
    } else {
      if (typeof value === 'boolean') {
        value = value.toString();
      }

      valString = escapeAttr(value.trim());
    }
  }

  value = value ? `="${valString}"` : '';
  return {
    name,
    value
  };
};
const flattenArray = arr => arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flattenArray(val) : val), []);
const safeAttrName = name => {
  const safeAttr = {
    className: 'class'
  };
  return safeAttr[name] || hyphenCase(name);
};
const hyphenCase = str => {
  str = str.replace(/[^\w\s\-]/gi, '');
  str = str.replace(/([A-Z])/g, function ($1) {
    return '-' + $1.toLowerCase();
  });
  return str.replace(/\s/g, '-').replace(/^-+/g, '');
};
const camelCase = str => str.replace(/-([a-z])/g, (m, w) => w.toUpperCase());
const bindEvents = (element, events) => {
  if (events) {
    for (const event in events) {
      if (events.hasOwnProperty(event)) {
        element.addEventListener(event, evt => events[event](evt));
      }
    }
  }
};
const nameAttr = function () {
  let lepoch;
  let counter = 0;
  return function (field) {
    const epoch = new Date().getTime();

    if (epoch === lepoch) {
      ++counter;
    } else {
      counter = 0;
      lepoch = epoch;
    }

    const prefix = field.type || hyphenCase(field.label);
    return prefix + '-' + epoch + '-' + counter;
  };
}();
const getContentType = content => {
  if (content === undefined) {
    return content;
  }

  return [['array', content => Array.isArray(content)], ['node', content => content instanceof window.Node || content instanceof window.HTMLElement], ['component', () => content && content.dom], [typeof content, () => true]].find(typeCondition => typeCondition[1](content))[0];
};
const markup = function (tag, content, attributes) {
  if (content === void 0) {
    content = '';
  }

  if (attributes === void 0) {
    attributes = {};
  }

  let contentType = getContentType(content);

  const {
    events
  } = attributes,
        attrs = _objectWithoutProperties(attributes, _excluded);

  const field = document.createElement(tag);
  const appendContent = {
    string: content => {
      field.innerHTML += content;
    },
    object: config => {
      const {
        tag,
        content
      } = config,
            data = _objectWithoutProperties(config, _excluded2);

      return field.appendChild(markup(tag, content, data));
    },
    node: content => {
      return field.appendChild(content);
    },
    array: content => {
      for (let i = 0; i < content.length; i++) {
        contentType = getContentType(content[i]);
        appendContent[contentType](content[i]);
      }
    },
    function: content => {
      content = content();
      contentType = getContentType(content);
      appendContent[contentType](content);
    },
    undefined: () => {}
  };

  for (const attr in attrs) {
    if (attrs.hasOwnProperty(attr)) {
      const name = safeAttrName(attr);
      const attrVal = Array.isArray(attrs[attr]) ? unique(attrs[attr].join(' ').split(' ')).join(' ') : attrs[attr];
      field.setAttribute(name, attrVal);
    }
  }

  if (content) {
    appendContent[contentType](content);
  }

  bindEvents(field, events);
  return field;
};
const parseAttrs = elem => {
  const attrs = elem.attributes;
  const data = {};
  forEach(attrs, attr => {
    let attrVal = attrs[attr].value || '';

    if (attrVal.match(/false|true/g)) {
      attrVal = attrVal === 'true';
    } else if (attrVal.match(/undefined/g)) {
      attrVal = undefined;
    }

    if (attrVal) {
      data[camelCase(attrs[attr].name)] = attrVal;
    }
  });
  return data;
};
const parseOptions = options => {
  const data = [];

  for (let i = 0; i < options.length; i++) {
    const optionData = _objectSpread(_objectSpread({}, parseAttrs(options[i])), {}, {
      label: options[i].textContent
    });

    data.push(optionData);
  }

  return data;
};
const parseUserData = userData => {
  const data = [];

  if (userData.length) {
    const values = userData[0].getElementsByTagName('value');

    for (let i = 0; i < values.length; i++) {
      data.push(values[i].textContent);
    }
  }

  return data;
};
const parseXML = xmlString => {
  const parser = new window.DOMParser();
  const xml = parser.parseFromString(xmlString, 'text/xml');
  const formData = [];

  if (xml) {
    const fields = xml.getElementsByTagName('field');

    for (let i = 0; i < fields.length; i++) {
      const fieldData = parseAttrs(fields[i]);
      const options = fields[i].getElementsByTagName('option');
      const userData = fields[i].getElementsByTagName('userData');

      if (options && options.length) {
        fieldData.values = parseOptions(options);
      }

      if (userData && userData.length) {
        fieldData.userData = parseUserData(userData);
      }

      formData.push(fieldData);
    }
  }

  return formData;
};
const parsedHtml = html => {
  const escapeElement = document.createElement('textarea');
  escapeElement.innerHTML = html;
  return escapeElement.textContent;
};
const escapeHtml = html => {
  const escapeElement = document.createElement('textarea');
  escapeElement.textContent = html;
  return escapeElement.innerHTML;
};
const escapeAttr = str => {
  const match = {
    '"': '&quot;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
  };

  const replaceTag = tag => match[tag] || tag;

  return typeof str === 'string' ? str.replace(/["&<>]/g, replaceTag) : str;
};
const escapeAttrs = attrs => {
  for (const attr in attrs) {
    if (attrs.hasOwnProperty(attr)) {
      attrs[attr] = escapeAttr(attrs[attr]);
    }
  }

  return attrs;
};
const forEach = function (array, callback, scope) {
  for (let i = 0; i < array.length; i++) {
    callback.call(scope, i, array[i]);
  }
};
const unique = array => {
  return array.filter((elem, pos, arr) => arr.indexOf(elem) === pos);
};
const removeFromArray = (val, arr) => {
  const index = arr.indexOf(val);

  if (index > -1) {
    arr.splice(index, 1);
  }
};
const getScripts = (scriptScr, path) => {
  const $ = jQuery;
  let _arr = [];

  if (!Array.isArray(scriptScr)) {
    scriptScr = [scriptScr];
  }

  if (!isCached(scriptScr)) {
    _arr = jQuery.map(scriptScr, src => {
      const options = {
        dataType: 'script',
        cache: true,
        url: (path || '') + src
      };
      return jQuery.ajax(options).done(() => window.fbLoaded.js.push(src));
    });
  }

  _arr.push(jQuery.Deferred(deferred => $(deferred.resolve)));

  return jQuery.when(..._arr);
};
const isCached = function (src, type) {
  if (type === void 0) {
    type = 'js';
  }

  let isCached = false;
  const cache = window.fbLoaded[type];

  if (Array.isArray(src)) {
    isCached = src.every(s => cache.includes(s));
  } else {
    isCached = cache.includes(src);
  }

  return isCached;
};
const getStyles = (scriptScr, path) => {
  if (!Array.isArray(scriptScr)) {
    scriptScr = [scriptScr];
  }

  scriptScr.forEach(src => {
    let type = 'href';
    let key = src;
    let id = '';

    if (typeof src == 'object') {
      type = src.type || (src.style ? 'inline' : 'href');
      id = src.id;
      src = type == 'inline' ? src.style : src.href;
      key = id || src.href || src.style;
    }

    if (isCached(key, 'css')) {
      return;
    }

    if (type == 'href') {
      const link = document.createElement('link');
      link.type = 'text/css';
      link.rel = 'stylesheet';
      link.href = (path || '') + src;
      document.head.appendChild(link);
    } else {
      $(`<style type="text/css">${src}</style>`).attr('id', id).appendTo($(document.head));
    }

    window.fbLoaded.css.push(key);
  });
};
const capitalize = str => {
  return str.replace(/\b\w/g, function (m) {
    return m.toUpperCase();
  });
};
const merge = (obj1, obj2) => {
  const mergedObj = Object.assign({}, obj1, obj2);

  for (const prop in obj2) {
    if (mergedObj.hasOwnProperty(prop)) {
      if (Array.isArray(obj2[prop])) {
        mergedObj[prop] = Array.isArray(obj1[prop]) ? unique(obj1[prop].concat(obj2[prop])) : obj2[prop];
      } else if (typeof obj2[prop] === 'object') {
        mergedObj[prop] = merge(obj1[prop], obj2[prop]);
      } else {
        mergedObj[prop] = obj2[prop];
      }
    }
  }

  return mergedObj;
};
const addEventListeners = (el, evts, cb) => evts.split(' ').forEach(e => el.addEventListener(e, cb, false));
const closest = (el, cls) => {
  const className = cls.replace('.', '');

  while ((el = el.parentElement) && !el.classList.contains(className));

  return el;
};
const mobileClass = () => {
  let mobileClass = '';

  (a => {
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)) {
      mobileClass = 'formbuilder-mobile';
    }
  })(navigator.userAgent || navigator.vendor || window.opera);

  return mobileClass;
};
const safename = str => {
  return str.replace(/\s/g, '-').replace(/[^a-zA-Z0-9[\]_-]/g, '');
};
const forceNumber = str => str.replace(/[^0-9]/g, '');
const subtract = (arr, from) => {
  return from.filter(function (a) {
    return !~this.indexOf(a);
  }, arr);
};
const insertStyle = srcs => {
  srcs = Array.isArray(srcs) ? srcs : [srcs];
  const promises = srcs.map(_ref3 => {
    let {
      src,
      id
    } = _ref3;
    return new Promise(resolve => {
      if (window.fbLoaded.css.includes(src)) {
        return resolve(src);
      }

      const formeoStyle = markup('link', null, {
        href: src,
        rel: 'stylesheet',
        id
      });
      document.head.insertBefore(formeoStyle, document.head.firstChild);
    });
  });
  return Promise.all(promises);
};
const removeStyle = id => {
  const elem = document.getElementById(id);
  return elem.parentElement.removeChild(elem);
};
function titleCase(str) {
  const lowers = ['a', 'an', 'and', 'as', 'at', 'but', 'by', 'for', 'for', 'from', 'in', 'into', 'near', 'nor', 'of', 'on', 'onto', 'or', 'the', 'to', 'with'].map(lower => `\\s${lower}\\s`);
  const regex = new RegExp(`(?!${lowers.join('|')})\\w\\S*`, 'g');
  return `${str}`.replace(regex, txt => txt.charAt(0).toUpperCase() + txt.substr(1).replace(/[A-Z]/g, word => ` ${word}`));
}
const utils = {
  addEventListeners,
  attrString,
  camelCase,
  capitalize,
  closest,
  getContentType,
  escapeAttr,
  escapeAttrs,
  escapeHtml,
  forceNumber,
  forEach,
  getScripts,
  getStyles,
  hyphenCase,
  isCached,
  markup,
  merge,
  mobileClass,
  nameAttr,
  parseAttrs,
  parsedHtml,
  parseOptions,
  parseUserData,
  parseXML,
  removeFromArray,
  safeAttr,
  safeAttrName,
  safename,
  subtract,
  trimObj,
  unique,
  validAttr,
  titleCase
};

utils.splitObject = (obj, keys) => {
  const reconstructObj = initialObj => (result, key) => {
    result[key] = initialObj[key];
    return result;
  };

  const kept = Object.keys(obj).filter(key => keys.includes(key)).reduce(reconstructObj(obj), {});
  const rest = Object.keys(obj).filter(key => !keys.includes(key)).reduce(reconstructObj(obj), {});
  return [kept, rest];
};

/* harmony default export */ __webpack_exports__["default"] = (utils);

/***/ })

/******/ });
})(jQuery);
//# sourceMappingURL=demo.min.js.map